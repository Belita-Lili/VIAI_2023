# -*- coding: utf-8 -*-
"""fourier-signal-generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sW8BhOmaeZODXMVSu0N_j_C6t29pKbMe
"""

import numpy as np
import matplotlib.pyplot as plt

# Definición de la función para generar una señal utilizando series de Fourier
def fourier_series(t, num_terms):
    signal = np.zeros_like(t)

    for n in range(1, num_terms + 1):
        amplitude = 1 / n  # Amplitud de cada armónico
        frequency = n  # Frecuencia de cada armónico
        phase = np.pi / 2  # Fase de cada armónico

        harmonic = amplitude * np.sin(2 * np.pi * frequency * t + phase)
        signal += harmonic

    return signal

# Parámetros de la señal
duration = 10  # Duración de la señal en segundos
sampling_rate = 1000  # Tasa de muestreo en Hz
num_samples = duration * sampling_rate
time = np.linspace(0, duration, num_samples)

# Generación de las señales utilizando series de Fourier
num_terms = 10  # Número de términos de la serie de Fourier
signal1 = fourier_series(time, num_terms)
signal2 = fourier_series(time, num_terms*2)
signal3 = fourier_series(time, num_terms*3)

# Gráfico de las señales generadas
plt.figure(figsize=(12, 6))

plt.subplot(3, 1, 1)
plt.plot(time, signal1)
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.title('Señal 1')

plt.subplot(3, 1, 2)
plt.plot(time, signal2)
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.title('Señal 2')

plt.subplot(3, 1, 3)
plt.plot(time, signal3)
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.title('Señal 3')

plt.tight_layout()
plt.show()